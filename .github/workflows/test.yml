---
name: tests

on:  # yamllint disable-line rule:truthy
  workflow_dispatch:
  pull_request:
  push:
    branches: [main]

defaults:
  run:
    shell: bash

env:
  PYTHONIOENCODING: 'utf-8'  # For log color
  PY_COLORS: 1  # For log color with pytest

jobs:
  pytest:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        py: ['3.7', '3.8', '3.9', '3.10']
        qt-lib: ['pyqt', 'pyside']
        include:
          - {py: '3.7', qt-lib: 'pyqt', qt: 'PyQt5~=5.15.0'}
          - {py: '3.7', qt-lib: 'pyside', qt: 'PySide2'}
          - {py: '3.8', qt-lib: 'pyqt', qt: 'PyQt5'}
          - {py: '3.8', qt-lib: 'pyside', qt: 'PySide6-Essentials'}
          - {py: '3.9', qt-lib: 'pyqt', qt: 'PyQt6'}
          - {py: '3.9', qt-lib: 'pyside', qt: 'PySide6-Essentials'}
          - {py: '3.10', qt-lib: 'pyqt', qt: 'PyQt6'}
          - {py: '3.10', qt-lib: 'pyside', qt: 'PySide6-Essentials'}
          - {os: ubuntu-latest, py: '3.11', qt-lib: 'pyqt', qt: 'PyQt6'}
          - {os: macOS-latest, py: '3.11', qt-lib: 'pyqt', qt: 'PyQt6'}
          - {os: windows-latest, py: '3.11', qt-lib: 'pyqt', qt: 'PyQt6'}
    env:
      TEST_IMG_OUTPUT_PATH: 'dist'
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - name: Setup Poetry
        run: |
          pipx install poetry
          poetry config virtualenvs.in-project true
      - uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: ${{ matrix.py }}

      - name: Cache ./.venv (poetry dependencies)
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: "\
            venv-\
            ${{ runner.os }}-\
            ${{ steps.setup-python.outputs.python-version }}-\
            ${{ matrix.qt }}-\
            ${{ hashFiles('**/poetry.lock') }}"

      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: poetry install --only github-actions,test,main

      - name: Install Qt dependencies
        run: poetry run pip install -U ${{ matrix.qt }}

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install --no-install-recommends -y \
            libxkbcommon-x11-0 \
            x11-utils \
            libyaml-dev \
            libegl1-mesa \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-xinerama0 \
            libopengl0

      - name: Run pytest
        run: poetry run pytest --cov --cov-report=term-missing --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Capture img of WidgetGallery
        run: |
          poetry run python ./tools/capture.py \
            -i ${{runner.os}}-py${{matrix.py}}-${{matrix.qt}} \
            -d ${{ env.TEST_IMG_OUTPUT_PATH }}

      - name: Archive WidgetGallery img
        uses: actions/upload-artifact@v3
        with:
          name: widget-img
          path: ./${{ env.TEST_IMG_OUTPUT_PATH }}/*.png


  # Python version does not affect tests without Qt.
  # So we don't need to test multiple python versions.
  pytest-without-qt:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - name: Setup Poetry
        run: |
          pipx install poetry
          poetry config virtualenvs.in-project true
      - uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: '3.11'

      - name: Cache ./.venv (poetry dependencies)
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: "\
            venv-without-qt\
            ${{ runner.os }}-\
            ${{ steps.setup-python.outputs.python-version }}-\
            ${{ hashFiles('**/poetry.lock') }}"

      - run: poetry install --only github-actions,test,main
        if: steps.cache-venv.outputs.cache-hit != 'true'

      - name: Run pytest without Qt lib
        run: |
          poetry run pytest \
            --cov \
            --cov-report=term-missing \
            --cov-report=xml \
            --ignore=tests/test_widget_gallery.py \
            --ignore=tests/test_qdarktheme_with_qt.py \
            -p no:pytest-qt

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}


  PyInstaller:
    env:
      TEST_FILE_NAME: test_with_PyInstaller.py
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: '3.11'

      - name: Cache ./.venv (poetry dependencies)
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: "\
            venv-test-PyInstaller-\
            ${{ steps.setup-python.outputs.python-version }}"

      - run: python -m venv .venv
        if: steps.cache-venv.outputs.cache-hit != 'true'

      - name: Install Python dependencies
        run: .venv/bin/python -m pip install -U . PyInstaller

      - name: Make test file
        run: |
          cat <<'EOL' >> ${{ env.TEST_FILE_NAME }}
          import logging
          import qdarktheme
          logging.basicConfig(level=logging.INFO)
          logging.info("qdarktheme version: %s", qdarktheme.__version__)
          logging.info("Available themes: %s", qdarktheme.get_themes())
          logging.info("Checking load_stylesheet() ...")
          qdarktheme.load_stylesheet()
          logging.info("Checking clear_cache() ...")
          qdarktheme.clear_cache()
          EOL
          cat -n ${{ env.TEST_FILE_NAME }}

      - name: Build test app
        run: |
          .venv/bin/python -m PyInstaller -y --onefile \
            ${{ env.TEST_FILE_NAME }} \
            --name test_app \
            --distpath ./dist

      - name: Test build app
        run: ./dist/test_app
